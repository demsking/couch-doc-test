# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-18 09:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.10.0\n"

# cce0bd0d396346b4a7ce05aca4f63fec
#: ../../../src/couchapp/views/pagination.rst:18
msgid "Pagination Recipe"
msgstr ""

# e7d54e458fb240df8af49743acd64663
#: ../../../src/couchapp/views/pagination.rst:20
msgid "This recipe explains how to paginate over view results. Pagination is a user interface (UI) pattern that allows the display of a large number of rows (`the result set`) without loading all the rows into the UI at once. A fixed-size subset, the `page`, is displayed along with next and previous links or buttons that can move the `viewport` over the result set to an adjacent page."
msgstr ""

# e7844ceb0e4c4f4298fb35835f9612a2
#: ../../../src/couchapp/views/pagination.rst:27
msgid "We assume you’re familiar with creating and querying documents and views as well as the multiple view query options."
msgstr ""

# 99098c15f77b403b834b41601681fba3
#: ../../../src/couchapp/views/pagination.rst:31
msgid "Example Data"
msgstr ""

# 01213aa18d104e24a1e5bd2a2dfbfeae
#: ../../../src/couchapp/views/pagination.rst:33
msgid "To have some data to work with, we’ll create a list of bands, one document per band::"
msgstr ""

# b6004e0bd58248cfb73fca2e8a0e03dc
#: ../../../src/couchapp/views/pagination.rst:59
msgid "A View"
msgstr ""

# bc6eb354a68141d6bb6f4c2312dc206f
#: ../../../src/couchapp/views/pagination.rst:61
msgid "We need a simple map function that gives us an alphabetical list of band names. This should be easy, but we’re adding extra smarts to filter out “The” and “A” in front of band names to put them into the right position:"
msgstr ""

# ca7f19185d2c44b5b5144d080929df67
#: ../../../src/couchapp/views/pagination.rst:74
msgid "The views result is an alphabetical list of band names. Now say we want to display band names five at a time and have a link pointing to the next five names that make up one page, and a link for the previous five, if we’re not on the first page."
msgstr ""

# 2361c1f30ae34bc09e85a524bb08e84d
#: ../../../src/couchapp/views/pagination.rst:79
msgid "We learned how to use the ``startkey``, ``limit``, and ``skip`` parameters in earlier documents. We’ll use these again here. First, let’s have a look at the full result set:"
msgstr ""

# 0e9a6734465d43da9a90a73e44946059
#: ../../../src/couchapp/views/pagination.rst:100
msgid "Setup"
msgstr ""

# 1074f0c3c4cf47d9bf6c075327ca3046
#: ../../../src/couchapp/views/pagination.rst:102
msgid "The mechanics of paging are very simple:"
msgstr ""

# defb497ced69416794ac349fd864eacb
#: ../../../src/couchapp/views/pagination.rst:104
msgid "Display first page"
msgstr ""

# 276196dc60064f69a91580f16f7cd6a2
# d793d53d71a044cb88e69b53117abde1
#: ../../../src/couchapp/views/pagination.rst:105
#: ../../../src/couchapp/views/pagination.rst:108
msgid "If there are more rows to show, show next link"
msgstr ""

# 2ab265a317a94c54b8e9b2e53abed344
#: ../../../src/couchapp/views/pagination.rst:106
msgid "Draw subsequent page"
msgstr ""

# 642ed00a2f1e4f86ac02cbebc671264f
#: ../../../src/couchapp/views/pagination.rst:107
msgid "If this is not the first page, show a previous link"
msgstr ""

# d68592360edf4a64be3bf0f76349ea99
#: ../../../src/couchapp/views/pagination.rst:110
msgid "Or in a pseudo-JavaScript snippet:"
msgstr ""

# f3bd194086bf49ea9aeb3c896b69532b
#: ../../../src/couchapp/views/pagination.rst:129
msgid "Slow Paging (Do Not Use)"
msgstr ""

# 944c1a3594ed4d8ea18e414eb3401634
#: ../../../src/couchapp/views/pagination.rst:131
msgid "**Don’t use this method!** We just show it because it might seem natural to use, and you need to know why it is a bad idea. To get the first five rows from the view result, you use the ``?limit=5`` query parameter::"
msgstr ""

# 9033fd51debc4234a5664689680089ed
# 970cf80eb143463aaf71af2dc7066364
#: ../../../src/couchapp/views/pagination.rst:137
#: ../../../src/couchapp/views/pagination.rst:167
msgid "The result:"
msgstr ""

# bbb9444dbb97485cb9edca28eaa43eae
#: ../../../src/couchapp/views/pagination.rst:149
msgid "By comparing the ``total_rows`` value to our ``limit`` value, we can determine if there are more pages to display. We also know by the `offset` member that we are on the first page. We can calculate the value for ``skip=`` to get the results for the next page:"
msgstr ""

# de198c1d22534e699cd0017cc6c4f622
#: ../../../src/couchapp/views/pagination.rst:160
msgid "So we query CouchDB with::"
msgstr ""

# 7889fdb5223441f685fda2378b855fb8
#: ../../../src/couchapp/views/pagination.rst:164
msgid "Note we have to use ``'`` (single quotes) to escape the ``&`` character that is special to the shell we execute curl in."
msgstr ""

# f5cb34e987da41dda01c5a93092cba16
#: ../../../src/couchapp/views/pagination.rst:180
msgid "Implementing the ``hasPrev()`` and ``hasNext()`` method is pretty straightforward:"
msgstr ""

# dc03b23e068e4c6dbadb0f3ea2f0790f
#: ../../../src/couchapp/views/pagination.rst:198
msgid "The dealbreaker"
msgstr ""

# b756225423b249ae9f0e3061bb686efa
#: ../../../src/couchapp/views/pagination.rst:200
msgid "This all looks easy and straightforward, but it has one fatal flaw. Remember how view results are generated from the underlying B-tree index: CouchDB jumps to the first row (or the first row that matches ``startkey``, if provided) and reads one row after the other from the index until there are no more rows (or ``limit`` or ``endkey`` match, if provided)."
msgstr ""

# f38dd7ad6b104a43ad0d0232c1b27255
#: ../../../src/couchapp/views/pagination.rst:206
msgid "The ``skip`` argument works like this: in addition to going to the first row and starting to read, skip will skip as many rows as specified, but CouchDB will still read from the first row; it just won’t return any values for the skipped rows. If you specify ``skip=100``, CouchDB will read 100 rows and not create output for them. This doesn’t sound too bad, but it is very bad, when you use 1000 or even 10000 as skip values. CouchDB will have to look at a lot of rows unnecessarily."
msgstr ""

# 77faf99bd09042f4b0435fa3a8c60a1a
#: ../../../src/couchapp/views/pagination.rst:214
msgid "As a rule of thumb, skip should be used only with single digit values. While it’s possible that there are legitimate use cases where you specify a larger value, they are a good indicator for potential problems with your solution. Finally, for the calculations to work, you need to add a reduce function and make two calls to the view per page to get all the numbering right, and there’s still a potential for error."
msgstr ""

# 1e8026d597f9400fb5af15f8a0b747fc
#: ../../../src/couchapp/views/pagination.rst:222
msgid "Fast Paging (Do Use)"
msgstr ""

# f7b95cc895cd4da1b8f3d1c1be62805d
#: ../../../src/couchapp/views/pagination.rst:224
msgid "The correct solution is not much harder. Instead of slicing the result set into equally sized pages, we look at 10 rows at a time and use ``startkey`` to jump to the next 10 rows. We even use skip, but only with the value 1."
msgstr ""

# 49da829844b244b5a32aa433f5d91429
#: ../../../src/couchapp/views/pagination.rst:228
msgid "Here is how it works:"
msgstr ""

# a65a7ddda0bf4aca80a84e9b755b4e1c
#: ../../../src/couchapp/views/pagination.rst:230
msgid "Request `rows_per_page + 1` rows from the view"
msgstr ""

# 66fecd35d24941a6babedfe24fbaeb9d
#: ../../../src/couchapp/views/pagination.rst:231
msgid "Display `rows_per_page` rows, `store + 1` row as `next_startkey` and `next_startkey_docid`"
msgstr ""

# c887ffd74a0e4ade948dbbf57d878951
#: ../../../src/couchapp/views/pagination.rst:233
msgid "As page information, keep ``startkey`` and `next_startkey`"
msgstr ""

# 5fd75f210f8a409da4373621fe005b91
#: ../../../src/couchapp/views/pagination.rst:234
msgid "Use the `next_*` values to create the next link, and use the others to create the previous link"
msgstr ""

# 4a962f5ba6894c0ea9e54114abcae67f
#: ../../../src/couchapp/views/pagination.rst:237
msgid "The trick to finding the next page is pretty simple. Instead of requesting 10 rows for a page, you request 11 rows, but display only 10 and use the values in the 11th row as the ``startkey`` for the next page. Populating the link to the previous page is as simple as carrying the current ``startkey`` over to the next page. If there’s no previous ``startkey``, we are on the first page. We stop displaying the link to the next page if we get `rows_per_page` or less rows back. This is called linked list pagination, as we go from page to page, or list item to list item, instead of jumping directly to a pre-computed page. There is one caveat, though. Can you spot it?"
msgstr ""

# a3574b222585473fac8e834245618808
#: ../../../src/couchapp/views/pagination.rst:247
msgid "CouchDB view keys do not have to be unique; you can have multiple index entries read. What if you have more index entries for a key than rows that should be on a page? ``startkey`` jumps to the first row, and you’d be screwed if CouchDB didn’t have an additional parameter for you to use. All view keys with the same value are internally sorted by `docid`, that is, the ID of the document that created that view row. You can use the ``startkey_docid`` and ``endkey_docid`` parameters to get subsets of these rows. For pagination, we still don’t need ``endkey_docid``, but ``startkey_docid`` is very handy. In addition to ``startkey`` and ``limit``, you also use ``startkey_docid`` for pagination if, and only if, the extra row you fetch to find the next page has the same key as the current ``startkey``."
msgstr ""

# 84a47f7139c548c1b40cd0773cb08a57
#: ../../../src/couchapp/views/pagination.rst:259
msgid "It is important to note that the `*_docid` parameters only work in addition to the `*key` parameters and are only useful to further narrow down the result set of a view for a single key. They do not work on their own (the one exception being the built-in :ref:`_all_docs view <api/db/all_docs>`  that already sorts by document ID)."
msgstr ""

# 40c24de5000240d48aeba4e77bf6fbd5
#: ../../../src/couchapp/views/pagination.rst:265
msgid "The advantage of this approach is that all the key operations can be performed on the super-fast B-tree index behind the view. Looking up a page doesn’t include scanning through hundreds and thousands of rows unnecessarily."
msgstr ""

# b07443d631034a54a6b16dc094d293fd
#: ../../../src/couchapp/views/pagination.rst:270
msgid "Jump to Page"
msgstr ""

# af718596e80f49308290d08ee40d07f4
#: ../../../src/couchapp/views/pagination.rst:272
msgid "One drawback of the linked list style pagination is that you can’t pre-compute the rows for a particular page from the page number and the rows per page. Jumping to a specific page doesn’t really work. Our gut reaction, if that concern is raised, is, “Not even Google is doing that!” and we tend to get away with it. Google always pretends on the first page to find 10 more pages of results. Only if you click on the second page (something very few people actually do) might Google display a reduced set of pages. If you page through the results, you get links for the previous and next 10 pages, but no more. Pre-computing the necessary ``startkey`` and ``startkey_docid`` for 20 pages is a feasible operation and a pragmatic optimization to know the rows for every page in a result set that is potentially tens of thousands of rows long, or more."
msgstr ""

# 15a44edc5afe45698f46209782e886ed
#: ../../../src/couchapp/views/pagination.rst:285
msgid "If you really do need to jump to a page over the full range of documents (we have seen applications that require that), you can still maintain an integer value index as the view index and take a hybrid approach at solving pagination."
msgstr ""
