# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-18 09:39+0000\n"
"PO-Revision-Date: 2013-11-24 23:08+0000\n"
"Last-Translator: Andy <andywenk@apache.org>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Pootle 2.5.0-rc1\n"
"X-POOTLE-MTIME: 1385334539.0\n"

# c25f760606c148da98df8d945f7898f1
#: ../../../src/intro/why.rst:18
msgid "Why CouchDB?"
msgstr "Warum CouchDB?"

# 7b3a5062a1c34ae48c4c5c4a04027086
#: ../../../src/intro/why.rst:20
msgid "Apache CouchDB is one of a new breed of database management systems. This topic explains why there's a need for new systems as well as the motivations behind building CouchDB."
msgstr ""
"Apache CouchDB ist eine neue Art von Datenbank System. Dieser Bereich "
"beschreibt zunächst, warum es einen Bedarf für solche Systeme gibt. "
"Anschließend wird auf die Motivation eingegangen, die hinter der Entwicklung "
"von CouchDB steckt."

# 5f3bdc4077214dda9d856fca2e15c53f
#: ../../../src/intro/why.rst:24
msgid "As CouchDB developers, we're naturally very excited to be using CouchDB. In this topic we'll share with you the reasons for our enthusiasm. We'll show you how CouchDB's schema-free document model is a better fit for common applications, how the built-in query engine is a powerful way to use and process your data, and how CouchDB's design lends itself to modularization and scalability."
msgstr ""
"Als CouchDB Entwickler haben wir selbstverständlicherweise ein starkes "
"Interesse daran, CouchDB zu benutzen. Wir möchten erzählen, was uns an "
"CouchDB begeistert. Wir werden zeigen, warum das schemafreie Dokumenten "
"Modell von CouchDB besser für die heute üblichen Anwendungen geeignet ist, "
"warum die eingebaute Query-Engine ein guter Weg ist, die gespeicherten Daten "
"zu lesen und zu verarbeiten und wie das Design von CouchDB Modularisierung "
"und Skalierbarkeit fördert."

# 8210a6097593419094d12a0b9eebf419
#: ../../../src/intro/why.rst:33
msgid "Relax"
msgstr "Relax"

# 9f286752b3574cc594c4df7966f350e6
#: ../../../src/intro/why.rst:35
msgid "If there's one word to describe CouchDB, it is *relax*. It is the byline to CouchDB's official logo and when you start CouchDB, you see::"
msgstr ""
"Falls man CouchDB mit einem Begriff beschreiben müsste, so ist es *Relax*. "
"Es ist die Byline von CouchDBs offiziellem Logo und wenn man CouchDB "
"startet, steht dort:"

# c4fe2cf6dd1a4217abd1ceb9d6d961e4
#: ../../../src/intro/why.rst:40
msgid "Why is relaxation important? Developer productivity roughly doubled in the last five years. The chief reason for the boost is more powerful tools that are easier to use. Take Ruby on Rails as an example. It is an infinitely complex framework, but it's easy to get started with. Rails is a success story because of the core design focus on ease of use. This is one reason why CouchDB is relaxing: learning CouchDB and understanding its core concepts should feel natural to most everybody who has been doing any work on the Web. And it is still pretty easy to explain to non-technical people."
msgstr ""
"Warum ist Entspannung wichtig? Die Produktivität von Entwicklern hat sich in "
"den letzten fünf Jahren verdoppelt. Für diesen Schub sind hauptsächlich "
"bessere Tools, die gleichzeitig einfacher zu bedienen sind, verantwortlich. "
"Wenn man Ruby on Rails als Beispiel nimmt, so sieht man ein unendlich "
"komplexes Framework mit dem der Einstieg jedoch sehr leicht ist. Rails ist "
"eine Erfolgsgeschichte weil das Hauptziel der Entwicklung auf der einfachen "
"Bedienung lag. Das ist einer der Gründe, warum CouchDB entspannend ist. Das "
"Verstehen der Grundkonzepte von CouchDB fühlt sich für jeden natürlich an, "
"der in irgendeiner Form mit dem Web arbeitet. Selbst nicht-technischen "
"Leuten ist es relativ einfach zu vermitteln."

# 458e83fa500d475bb941758600293903
#: ../../../src/intro/why.rst:49
msgid "Getting out of the way when creative people try to build specialized solutions is in itself a core feature and one thing that CouchDB aims to get right. We found existing tools too cumbersome to work with during development or in production, and decided to focus on making CouchDB easy, even a pleasure, to use."
msgstr ""
"Nicht im Weg zu stehen, wenn kreative Menschen versuchen ein Problem zu "
"lösen, ist eine der wichtigsten Eigenschaften — eine, die CouchDB versucht "
"gut erfüllen. Für uns waren die bestehenden Tools zu schwerfällig — sowohl "
"während der Entwicklung als auch während des Betriebs. Deshalb haben wir uns "
"darauf konzentriert, CouchDB so einfach wie möglich zu halten und es "
"spielend leicht bedienen zu können."

# a5d8e32f393649bb91ca5f6784c7d2f5
#: ../../../src/intro/why.rst:55
msgid "Another area of relaxation for CouchDB users is the production setting. If you have a live running application, CouchDB again goes out of its way to avoid troubling you. Its internal architecture is fault-tolerant, and failures occur in a controlled environment and are dealt with gracefully. Single problems do not cascade through an entire server system but stay isolated in single requests."
msgstr ""
"Ein weiterer Bereich der Entspannung ist der Produktivbetrieb. Im "
"Zusammenspiel mit einer Anwendung, die von echten Benutzern benutzt wird, "
"versucht CouchDB sein Möglichstes, um den Administrator in Ruhe zu lassen. "
"Die interne Architektur ist fehlertolerant, Ausnahmen finden in einer "
"kontrollierten Umgebung statt und werden ordentlich bearbeitet. Einzelne "
"Fehler rauschen nicht durch das ganze System nach oben durch sondern bleiben "
"auf den einen Request beschränkt."

# 120725e79f5c431caf94c68395fdd8d5
#: ../../../src/intro/why.rst:62
msgid "CouchDB's core concepts are simple (yet powerful) and well understood. Operations teams (if you have a team; otherwise, that's you) do not have to fear random behavior and untraceable errors. If anything should go wrong, you can easily find out what the problem is, but these situations are rare."
msgstr ""
"Die Konzepte von CouchDB sind einfach, aber dennoch mächtig und gut "
"dokumentiert. Das Produktionsteam (falls es ein Team gibt, andernfalls bist "
"das du) brauchen sich keine Sorgen vor unvorhersagbarem Verhalten und schwer "
"nachvollziehbaren Fehlern zu machen. Falls etwas schief gehen sollte, kann "
"man einfach herausfinden, wo das Problem liegt — doch diese Fälle sind "
"selten."

# abf79f22bdd2417d80c112a9981bf855
#: ../../../src/intro/why.rst:67
msgid "CouchDB is also designed to handle varying traffic gracefully. For instance, if a website is experiencing a sudden spike in traffic, CouchDB will generally absorb a lot of concurrent requests without falling over. It may take a little more time for each request, but they all get answered. When the spike is over, CouchDB will work with regular speed again."
msgstr ""
"CouchDB ist von Anfang an darauf ausgelegt, mit wechselnder Last intelligent "
"umzugehen. Sollte eine Webseite schlagartig viele Requests bekommen, wird "
"CouchDB sie einfach weiter beantworten ohne einen zu vergessen. Es mag unter "
"Last etwas länger dauern, aber alle bekommen eine Antwort. Sobald der "
"Ansturm vorüber ist, antwortet CouchDB wieder mit gewohnter Geschwindigkeit."

# b63b25837c6543fdaf6488253d2e258b
#: ../../../src/intro/why.rst:73
msgid "The third area of relaxation is growing and shrinking the underlying hardware of your application. This is commonly referred to as scaling. CouchDB enforces a set of limits on the programmer. On first look, CouchDB might seem inflexible, but some features are left out by design for the simple reason that if CouchDB supported them, it would allow a programmer to create applications that couldn't deal with scaling up or down."
msgstr ""
"Der dritte Bereich der Entspannung sind wechselnde Hardware Anforderungen "
"deiner Anwendung. Das wird üblicherweise als Skalierung bezeichnet. CouchDB "
"setzt dem Programmierer Grenzen. Das mag auf den ersten Blick unflexibel "
"erscheinen, doch manche Funktionen wurden ganz bewusst weggelassen, weil mit "
"ihnen der Programmierer in der Lage gewesen wäre, Anwendungen zu schreiben, "
"die nicht skalieren. "

# d6a949aa20a74e2f9edc52b100adb5f9
#: ../../../src/intro/why.rst:81
msgid "CouchDB doesn't let you do things that would get you in trouble later on. This sometimes means you'll have to unlearn best practices you might have picked up in your current or past work."
msgstr ""
"CouchDB erlaubt dir keine Dinge, die dich später in Schwierigkeiten bringen. "
"Das kann bedeuten, dass man alte Gewohnheiten über Bord werfen muß."

# 9422ae8b27c946d09e47dd44767555d8
#: ../../../src/intro/why.rst:87
msgid "A Different Way to Model Your Data"
msgstr "Ein anderer Weg Daten zu modellieren"

# a0ac111783d449efa06c6545026ee5ba
#: ../../../src/intro/why.rst:89
msgid "We believe that CouchDB will drastically change the way you build document-based applications. CouchDB combines an intuitive document storage model with a powerful query engine in a way that's so simple you'll probably be tempted to ask, “Why has no one built something like this before?”"
msgstr ""
"Wir glauben das CouchDB die Art, wie du dokumentenbasierte Anwendungen baust "
"sich verändern wird. CouchDB verbindet ein intuitives Modell zum Speichern "
"von Dokumenten kombiniert mit einer mächtigen Query-Engine, die so einfach "
"ist, dass man sich fragt, \"Warum hat das noch niemand vorher gebaut?\"."

# febee999481b426d82dbf9e1ad11fb3b
#: ../../../src/intro/why.rst:94
msgid "Django may be built for the Web, but CouchDB is built of the Web. I've never seen software that so completely embraces the philosophies behind HTTP. CouchDB makes Django look old-school in the same way that Django makes ASP look outdated."
msgstr ""
"Django mag für das Web gebaut worden sein, doch CouchDB ist auf dem Web "
"gebaut. Ich habe bisher noch keine Software gesehen, welche die Philosophien "
"von HTTP so vollständig umgesetzt hat. CouchDB lässt Django alt aussehen — "
"genauso wie Django ASP hat alt aussehen lassen."

# ad0df29c59fe4445b0c8569627b656b9
#: ../../../src/intro/why.rst:105
msgid "Jacob Kaplan-Moss, Django developer"
msgstr "Jacob Kaplan-Moss, Django Entwickler"

# 5f56e405164349178c8f858df4813fb5
#: ../../../src/intro/why.rst:101
msgid "CouchDB's design borrows heavily from web architecture and the concepts of resources, methods, and representations. It augments this with powerful ways to query, map, combine, and filter your data. Add fault tolerance, extreme scalability, and incremental replication, and CouchDB defines a sweet spot for document databases."
msgstr ""
"Das Design von CouchDB ist stark an bestehende Web Architekturen und den "
"Konzepten von Resourcen, Methoden und Darstellungen angelehnt. Es kombiniert "
"sie in mächtiger Weise um Daten zu suchen, abzubilden, zu kombinieren und "
"zu filtern. Hinzu kommen Fehlertoleranz, extreme Skalierbarkeit und "
"inkrementelle Replikation. Damit definiert CouchDB genau den Sweet Spot für "
"dokumentenbasierte Datenbanken."

# e1753fdfe54042a790f00773166b14b1
#: ../../../src/intro/why.rst:109
msgid "A Better Fit for Common Applications"
msgstr "Ein besserer Ansatz für gängige Anwendungen"

# 80db5bb8ca1c46daa30acf92b74d6dc9
#: ../../../src/intro/why.rst:111
msgid "We write software to improve our lives and the lives of others. Usually this involves taking some mundane information such as contacts, invoices, or receipts and manipulating it using a computer application. CouchDB is a great fit for common applications like this because it embraces the natural idea of evolving, self-contained documents as the very core of its data model."
msgstr ""
"Wir schreiben Software, um unser Leben und das Leben anderer zu erleichtern. "
"Dazu verwenden wir meistens einfache Informationen wie Kontakte, Rechnungen "
"oder Quittungen und verarbeiten sie mithilfe von Computer Software. CouchDB "
"ist ein guter Partner für solche Anwendungen, denn es arbeitet mit der "
"natürlichen Idee von in sich abgeschlossenen Dokumenten, die alle "
"notwendigen Informationen enthalten und mit der Zeit fortgeschrieben werden."

# 5fab8aa2d43b47509e8427dfb1785336
#: ../../../src/intro/why.rst:119
msgid "Self-Contained Data"
msgstr "In sich abgeschlossene Daten"

# 7161ee4a7adf44e6a18f981326d4c09d
#: ../../../src/intro/why.rst:121
msgid "An invoice contains all the pertinent information about a single transaction the seller, the buyer, the date, and a list of the items or services sold. As shown in :ref:`intro/why-01`, there's no abstract reference on this piece of paper that points to some other piece of paper with the seller's name and address. Accountants appreciate the simplicity of having everything in one place. And given the choice, programmers appreciate that, too."
msgstr ""
"Eine Rechnung enthält alle notwendigen Informationen über einen einzelnen "
"Vorgang. Den Verkäufer, den Käufer, das Datum und eine Auflistung der Dinge "
"oder Dienste, die verkauft wurden. Wie in Abbildung 1 „In sich "
"abgeschlossene Dokumente“ zu sehen ist, gibt es keine abstrakten Referenzen "
"auf dem Stück Papier, die zu einem anderen Stück Papier verweisen, zum "
"Beispiel mit dem Namen und der Adresse des Verkäufers. Buchhalter wissen es "
"zu schätzen, alle Informationen auf einen Blick zu haben. Falls sie die "
"Möglichkeit haben, bevorzugen Programmierer das auch."

# a5d28311fd9f421b89c30836b5c08083
#: ../../../src/intro/why.rst:138
msgid "Yet using references is exactly how we model our data in a relational database! Each invoice is stored in a table as a row that refers to other rows in other tables one row for seller information, one for the buyer, one row for each item billed, and more rows still to describe the item details, manufacturer details, and so on and so forth."
msgstr ""
"Doch genau mit solchen Referenzen werden Daten in relationalen Datenbanken "
"modelliert. Jede Rechnung wird als Zeile in einer Tabelle gespeichert. Diese "
"Zeile verweist auf andere Zeilen in anderen Tabellen — eine für den Käufer, "
"eine für den Verkäufer, eine für jedes Teil was verkauft wurde und noch "
"mehr Zeilen, die wiederum die verkauften Teile genauer beschreiben."

# 51bf85cba9c948a08864410b2df57233
#: ../../../src/intro/why.rst:144
msgid "This isn't meant as a detraction of the relational model, which is widely applicable and extremely useful for a number of reasons. Hopefully, though, it illustrates the point that sometimes your model may not “fit” your data in the way it occurs in the real world."
msgstr ""
"Damit soll der Wert von relationalen Modellen nicht geschmälert werden. Sie "
"sind in vielen Anwendungen im Einsatz und haben sich aus verschiedenen "
"Gründen als sehr nützlich erwiesen. Das vorangegange Beispiel soll zeigen, "
"dass manche Modelle sich nicht so gut für die Daten der realen Welt eignen."

# 7f6f84613e274554a30d4ceaa6f4895d
#: ../../../src/intro/why.rst:149
msgid "Let's take a look at the humble contact database to illustrate a different way of modeling data, one that more closely “fits” its real-world counterpart -- a pile of business cards. Much like our invoice example, a business card contains all the important information, right there on the cardstock. We call this “self-contained” data, and it's an important concept in understanding document databases like CouchDB."
msgstr ""
"Schauen wir auf eine einfache Adressdatenbank um einen anderen Ansatz zur "
"Modellierung von Daten zu illustrieren. Dazu kann man sich einen Stapel "
"Visitenkarten vorstellen. Genau wie das Beispiel mit der Rechnung enthält "
"eine Visitenkarte alle wichtigen Informationen auf einen Blick. Wir nennen "
"das „in sich abgeschlossene Daten“ und es ist ein wichtiges Konzept beim "
"Verständnis von dokumentenbasierten Datenbanken wie CouchDB."

# 52758bfb065d46c0be9ada87eaf1c7de
#: ../../../src/intro/why.rst:158
msgid "Syntax and Semantics"
msgstr "Syntax und Semantik"

# 14e0461784544f98acde7400dfe71aac
#: ../../../src/intro/why.rst:160
msgid "Most business cards contain roughly the same information -- someone's identity, an affiliation, and some contact information. While the exact form of this information can vary between business cards, the general information being conveyed remains the same, and we're easily able to recognize it as a business card. In this sense, we can describe a business card as a *real-world document*."
msgstr ""
"Die meisten Visitenkarten enthalten ungefähr die gleichen Informationen: den "
"Namen, vielleicht ein Firmenname und Kontaktinformationen. Obwohl die Daten "
"zwischen den einzelnen Karten differieren kann, ist doch das allgemeine "
"Schema immer gleich und Menschen haben keine Schwierigkeiten damit "
"Visitenkarten als solche zu erkennen. So gesehen kann man eine Visitenkarte "
"als ein reales Dokument bezeichnen."

# 1730d3e740354beb93e86f90422a1eb2
#: ../../../src/intro/why.rst:167
msgid "Jan's business card might contain a phone number but no fax number, whereas J. Chris's business card contains both a phone and a fax number. Jan does not have to make his lack of a fax machine explicit by writing something as ridiculous as “Fax: None” on the business card. Instead, simply omitting a fax number implies that he doesn't have one."
msgstr ""
"Jan hat vielleicht eine Telefonnummer aber keine FAX Nummer auf seiner "
"Visitenkarte. Dagegen enthält die Karte von J. Chris beide Nummern. Jan muss "
"das Fehlen einer FAX Nummer nicht umständlich und explizit durch “Fax: "
"Nicht vorhanden” ausdrücken. Durch einfaches Weglassen der FAX Nummer gibt "
"er zu verstehen, dass er keins hat."

# db9c7b96cdd646049089484c8672c2bc
#: ../../../src/intro/why.rst:173
msgid "We can see that real-world documents of the same type, such as business cards, tend to be very similar in *semantics* -- the sort of information they carry, but can vary hugely in *syntax*, or how that information is structured. As human beings, we're naturally comfortable dealing with this kind of variation."
msgstr ""
"Reale Dokumente des gleichen Typs, so wie Visitenkarten, neigen dazu in "
"ihrer *Semantik* — die Art der Information — sehr ähnlich zu sein. Ihre "
"*Syntax* oder wie die Information tatsächlich aufgebaut ist, kann jedoch "
"zwischen den einzelnen Karten sehr unterschiedlich sein. Menschen haben "
"damit kein Problem. Für uns sind diese Variationen normal."

# 7dd663bc45694c7f9d0feb39c1f2acc1
#: ../../../src/intro/why.rst:178
msgid "While a traditional relational database requires you to model your data *up front*, CouchDB's schema-free design unburdens you with a powerful way to aggregate your data *after the fact*, just like we do with real-world documents. We'll look in depth at how to design applications with this underlying storage paradigm."
msgstr ""
"Während ein traditionelles relationales Datenbank System erfordert, dass man "
"die Daten *im voraus* durch ein Schema strukturiert, erlaubt das schema-"
"freie Design von CouchDB die Daten erst nach dem Eintrag in die Datenbank zu "
"strukturieren. Genauso wie man es auch mit realen Dokumenten macht. Wie man "
"mit diesem Ansatz Anwendungen zur Speicherung von Daten entwickelt "
"betrachten wir noch tiefergehend."

# 8a637254ad6e4d07bdea37aae159b140
#: ../../../src/intro/why.rst:186
msgid "Building Blocks for Larger Systems"
msgstr "Bausteine für größere Systeme"

# 4acf79ba01414cc5930a525eec53d412
#: ../../../src/intro/why.rst:188
msgid "CouchDB is a storage system useful on its own. You can build many applications with the tools CouchDB gives you. But CouchDB is designed with a bigger picture in mind. Its components can be used as building blocks that solve storage problems in slightly different ways for larger and more complex systems."
msgstr ""
"CouchDB ist ein Speichersystem, das für sich allein genommen schon recht "
"nützlich ist. Man kann viele Anwendungen mit den Werkzeugen bauen, die "
"CouchDB bietet. Doch die Vision von CouchDB ist größer. Seine Bestandteile "
"können als Bausteine für große Systeme benutzt werden, um Speicherprobleme "
"für immer stärker wachsende Anwendungen zu lösen."

# c7e662cfe3834d2daa0c83a571af7a7a
#: ../../../src/intro/why.rst:193
msgid "Whether you need a system that's crazy fast but isn't too concerned with reliability (think logging), or one that guarantees storage in two or more physically separated locations for reliability, but you're willing to take a performance hit, CouchDB lets you build these systems."
msgstr ""
"Ob ein System unglaublich schnell sein muss, Zuverlässigkeit aber nicht "
"allzu wichtig ist (z.B. für Logging), oder ein System Schreiboperationen in "
"zwei verschiedenen, geografisch getrennten Systemen garantieren muss und die "
"damit verbundene höhere Antwortzeit akzeptabel ist — CouchDB erlaubt es "
"solche Systeme zu bauen."

# aaac391e2c704cf1a800d3a936374b14
#: ../../../src/intro/why.rst:198
msgid "There are a multitude of knobs you could turn to make a system work better in one area, but you'll affect another area when doing so. One example would be the CAP theorem discussed in :ref:`intro/consistency`. To give you an idea of other things that affect storage systems, see :ref:`Figure 2 <intro/why-figure-02>` and :ref:`Figure 3 <intro/why-figure-03>`."
msgstr ""
"Meist gibt es viele Knöpfe an denen man drehen kann, um ein System zu "
"optimieren. Doch hat der positive Effekt in der Regel auch unerwünschte "
"Nebenwirkungen. Ein Beispiel ist das CAP Theorem, das im Dokument "
":ref:`intro/consistency` ausführlicher behandelt wird. Andere Parameter, die "
"Datenspeichersysteme in der Regel beeinflussen, werden in :ref:`Abbildung 2 "
"<intro/why-figure-02>` und :ref:`Abbildung 3 <intro/why-figure-03>` "
"gezeigt."

# 70b6a7af97ba4c06a8a3229b4bda5d5b
#: ../../../src/intro/why.rst:204
msgid "By reducing latency for a given system (and that is true not only for storage systems), you affect concurrency and throughput capabilities."
msgstr ""
"Reduziert man die Latenz eines Systems, so hat das Auswirkungen auf die "
"Parallelität und den Durchsatz. Das gilt im übrigen nicht nur für "
"Speichersysteme."

# 617a44c084954fd0a6761721828cd66e
#: ../../../src/intro/why.rst:226
msgid "When you want to scale out, there are three distinct issues to deal with: scaling read requests, write requests, and data. Orthogonal to all three and to the items shown in :ref:`Figure 2 <intro/why-figure-02>` and :ref:`Figure 3 <intro/why-figure-03>` are many more attributes like reliability or simplicity. You can draw many of these graphs that show how different features or attributes pull into different directions and thus shape the system they describe."
msgstr ""
"Wenn eine Anwendung nach oben skaliert werden soll, muss man drei Faktoren "
"der Skalierung berücksichtigen: die der Leseoperationen, die der "
"Schreiboperationen und die der Daten. Orthogonal zu allen dreien und zu den "
"Parametern aus :ref:`Abbildung 2 <intro/why-figure-02>` und :ref:`Abbildung "
"3 <intro/why-figure-03>` sind viele weitere Parameter wie Zuverlässigkeit "
"und Einfachheit. Man kann viele solcher Graphen zeichnen, die zeigen das "
"verschiedene Funktionen und Eigenschaften das System in eine bestimmte "
"Richtung ziehen oder schieben und damit das System neu formen."

# 7b819fc697674a228bbdbced0ddbd391
#: ../../../src/intro/why.rst:233
msgid "CouchDB is very flexible and gives you enough building blocks to create a system shaped to suit your exact problem. That's not saying that CouchDB can be bent to solve any problem -- CouchDB is no silver bullet -- but in the area of data storage, it can get you a long way."
msgstr ""
"CouchDB ist sehr flexibel und bietet genügend Bausteine um ein System zu "
"bauen, dass auf die aktuellen Anforderungen exakt zugeschnitten ist. Das "
"bedeutet nicht, dass CouchDB eine Eierlegende Wollmilchsau ist, mit der man "
"jedes Datenbank Problem lösen kann, aber man kommt schon sehr weit damit."

# 545909871e9e4f02ba96fb4c6285c90c
#: ../../../src/intro/why.rst:240
msgid "CouchDB Replication"
msgstr "CouchDB Replikation"

# 023eb3041edf4ed18f501f158de09fe4
#: ../../../src/intro/why.rst:242
msgid "CouchDB replication is one of these building blocks. Its fundamental function is to synchronize two or more CouchDB databases. This may sound simple, but the simplicity is key to allowing replication to solve a number of problems: reliably synchronize databases between multiple machines for redundant data storage; distribute data to a cluster of CouchDB instances that share a subset of the total number of requests that hit the cluster (load balancing); and distribute data between physically distant locations, such as one office in New York and another in Tokyo."
msgstr ""
"Die Replikation von CouchDB ist einer dieser Bausteine. Seine primäre "
"Aufgabe ist die Synchronisation von zwei oder mehr CouchDB Datenbanken. Das "
"mag einfach klingen, doch die Einfachheit ist der Schlüssel um mit der "
"Replikation verschiedene Probleme zu lösen: — Zuverlässige Synchronisation "
"von Datenbanken auf verschiedenen Maschinen um Daten redundant zu speichern "
"— Verteilung der Daten über einen Cluster von CouchDB Instanzen, die jeweils "
"einen Teil der Requests beantworten (Lastverteilung) und Spiegelung der "
"Daten über geografisch weit verteilte Standort wie beispielsweise New York "
"und Tokyo."

# cd7a3d37d0d04953ad48b634dcf68035
#: ../../../src/intro/why.rst:251
msgid "CouchDB replication uses the same REST API all clients use. HTTP is ubiquitous and well understood. Replication works incrementally; that is, if during replication anything goes wrong, like dropping your network connection, it will pick up where it left off the next time it runs. It also only transfers data that is needed to synchronize databases."
msgstr ""
"Die Replikation von CouchDB benutzt dabei das selbe REST API, das alle "
"anderen Clients auch benutzen. HTTP ist allgegenwärtig und seine Nutzung gut "
"verstanden. Die Replikation von CouchDB arbeitet inkrementell. Das "
"bedeutet, das falls während der Replikation etwas schief geht — weil "
"beispielsweise eine Netzwerkverbindung verschwindet — wird CouchDB genau "
"dort wieder weiter machen, wo diese aufgehört hat. Es werden auch nur die "
"Daten übertragen, die notwendig sind, um die Datenbanken zu synchronisieren."

# a9d6e1a368534743912186c5dbe06ec9
#: ../../../src/intro/why.rst:257
msgid "A core assumption CouchDB makes is that things can go wrong, like network connection troubles, and it is designed for graceful error recovery instead of assuming all will be well. The replication system's incremental design shows that best. The ideas behind “things that can go wrong” are embodied in the `Fallacies of Distributed Computing`_:"
msgstr ""
"Eine der Grundannahmen in CouchDB ist, das Fehler auftreten werden. CouchDB "
"ist darauf ausgerichtet, Fehler vernünftig zu behandeln anstatt anzunehmen, "
"es wird keine geben. Das inkrementelle Design der Replikation zeigt das am "
"Besten. Die Ideen hinter “Fehler werden passieren” sind in `Fallacies of "
"Distributed Computing`_ aufgelistet:"

# 288a3556e2bd4c118d220f16024bae55
#: ../../../src/intro/why.rst:263
msgid "The network is reliable."
msgstr "Das Netzwerk ist ausfallsicher"

# 84b6c5b0c67243ffb9598adf669d71dd
#: ../../../src/intro/why.rst:264
msgid "Latency is zero."
msgstr "Die Latenz ist gleich Null"

# 648423f15f674debbaf9b754eaa0e2fa
#: ../../../src/intro/why.rst:265
msgid "Bandwidth is infinite."
msgstr "Der Datendurchsatz ist unendlich"

# 5c6b10fe96e84059ab7e7e2ebcfad500
#: ../../../src/intro/why.rst:266
msgid "The network is secure."
msgstr "Das Netzwerk ist sicher"

# 1389d26655404c138800ecb07002bfb8
#: ../../../src/intro/why.rst:267
msgid "Topology doesn't change."
msgstr "Die Netzwerktopologie wird sich nie ändern"

# 69a7e402efb84cb3a8af8e6c2769a32c
#: ../../../src/intro/why.rst:268
msgid "There is one administrator."
msgstr "Es gibt immer nur einen Netzwerkadministrator"

# ff25815c264144e49c5952d79de993db
#: ../../../src/intro/why.rst:269
msgid "Transport cost is zero."
msgstr "Der Datentransport kostet nichts"

# b10146a3db5346afa0f562c12e86b2e4
#: ../../../src/intro/why.rst:270
msgid "The network is homogeneous."
msgstr "Das Netzwerk ist homogen"

# 15c3dae7c4b94ff69a90f22b5aed08fc
#: ../../../src/intro/why.rst:272
msgid "Existing tools often try to hide the fact that there is a network and that any or all of the previous conditions don't exist for a particular system. This usually results in fatal error scenarios when something finally goes wrong. In contrast, CouchDB doesn't try to hide the network; it just handles errors gracefully and lets you know when actions on your end are required."
msgstr ""
"Bestehende Werkzeuge versuchen oft zu verstecken, dass es ein Netzwerk gibt "
"und das eine oder alle der oben genannten Dinge für das aktuelle System "
"nicht zutreffen. Das Ergebnis ist oft genug eine fatale Situation wenn Dinge "
"letzendlich doch schief gehen. CouchDB versucht im Gegenteil gar nicht erst "
"das Netzwerk zu abstrahieren, sondern Fehler vernünftig zu behandeln und "
"den Administrator zu benachrichtigen, wenn das nicht möglich ist."

# d0aefa4d38ad4f5b98547db02cbc1ae8
#: ../../../src/intro/why.rst:282
msgid "Local Data Is King"
msgstr "Hauptsache Lokal"

# cbc2bfbfc7a242e29d6649907b0a7ecb
#: ../../../src/intro/why.rst:284
msgid "CouchDB takes quite a few lessons learned from the Web, but there is one thing that could be improved about the Web: latency. Whenever you have to wait for an application to respond or a website to render, you almost always wait for a network connection that isn't as fast as you want it at that point. Waiting a few seconds instead of milliseconds greatly affects user experience and thus user satisfaction."
msgstr ""
"CouchDB hat viele Lehren aus dem Web gezogen, doch eine Sache wäre gut für "
"das Web: weniger Latenz. Wenn auch immer man auf eine Anwendung oder auf "
"eine Webseite warten muss, so ist die Netzwerkverbindung meist nicht so "
"schnell, wie es gerade erforderlich wäre. Antwortzeiten von ein paar "
"Sekunden anstelle von Millisekunden haben einen großen Effekt auf die User "
"Experience (UX) und die Zufriedenheit der Anwender mit dem System als "
"Ganzem."

# 304e80bae7744c2f9b21548d1e743c4c
#: ../../../src/intro/why.rst:291
msgid "What do you do when you are offline? This happens all the time -- your DSL or cable provider has issues, or your iPhone, G1, or Blackberry has no bars, and no connectivity means no way to get to your data."
msgstr ""
"Was macht man, wenn man offline ist? Das passiert ständig trotz DSL und "
"Kabel Anschluss. Was ist mit dem iPhone, dem G1 oder dem Blackberry, wenn "
"kein Empfang vorhanden ist? Keine Verbindung bedeutet nicht an die Daten zu "
"kommen."

# 17662f652ea24609becb027aa09f7bb5
#: ../../../src/intro/why.rst:295
msgid "CouchDB can solve this scenario as well, and this is where scaling is important again. This time it is scaling down. Imagine CouchDB installed on phones and other mobile devices that can synchronize data with centrally hosted CouchDBs when they are on a network. The synchronization is not bound by user interface constraints like subsecond response times. It is easier to tune for high bandwidth and higher latency than for low bandwidth and very low latency. Mobile applications can then use the local CouchDB to fetch data, and since no remote networking is required for that, latency is low by default."
msgstr ""
"CouchDB kann in solchen Fällen helfen und in dieser Situation ist Skalierung "
"auch wichtig. Diesmal allerdings in die andere Richtung — nämlich nach "
"unten. Warum nicht eine CouchDB Instanz auf einem Smartphone, die sich mit "
"anderen CouchDB Instanzen synchronisiert, wenn eine Verbindung besteht? Die "
"Synchronisation ist nicht nur sinnvoll für schnelle Benutzerschnittstellen. "
"Es ist einfacher ein System auf hohe Bandbreite und hohe Latenz zu "
"optimieren, als für geringe Bandbreite und geringe Latenz. Mobile Anwendung "
"können anschließend die Daten in der lokalen CouchDB Instanz benutzen und "
"weil die Daten lokal sind, ist die Latenz per Definition gering."

# 1a32f11f4e6d47cda2f5a86c23aad17d
#: ../../../src/intro/why.rst:305
msgid "Can you really use CouchDB on a phone? Erlang, CouchDB's implementation language has been designed to run on embedded devices magnitudes smaller and less powerful than today's phones."
msgstr ""
"Kann man CouchDB wirklich auf einem Smartphone einsetzen? Erlang, die "
"Sprache in der CouchDB geschrieben ist, wurde für viel kleinere und viel "
"schwächere Geräte als die heute verfügbaren entwickelt und auch eingesetzt."

# b79f08715f714cb296a8d7a401555a4c
#: ../../../src/intro/why.rst:311
msgid "Wrapping Up"
msgstr "Fassen wir zusammen"

# 85b7d4d4617e4213b570cf31850a1a16
#: ../../../src/intro/why.rst:313
msgid "The next document :ref:`intro/consistency` further explores the distributed nature of CouchDB. We should have given you enough bites to whet your interest. Let's go!"
msgstr ""
"Das nächste Dokument :ref:`intro/consistency` zeigt die verteilte Natur von "
"CouchDB. Dieses Dokument sollte genug Interessantes enthalten haben, um "
"weiterzulesen. Auf geht's!"
